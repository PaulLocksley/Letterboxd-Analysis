@page "/UserComparisonGrid"
@using Blazor_Frontend.Shared
@using System.Text.Json
@using System.Text.Json.Serialization;
@using System.Net.Http.Json
<head>
        <link href="css/LetterboxdComparison.css" rel="stylesheet" />
</head>

<PageTitle>User Comparison</PageTitle>
<h1>User Comparison</h1>

<button class="btn btn-primary" @onclick="() => getUserList()">Call API</button>
<button class="btn btn-primary" @onclick="() => resetFilter()"> Reset Filter </button>

<input type="text" @bind="@UserNames[0]" @oninput="@((e) => { UserNames[0]=(string)e.Value;})" />
<input type="text" @bind="@UserNames[1]" @oninput="@((e) => { UserNames[1]=(string)e.Value;})" />
@*<input type="text" @bind="@UserNames[2]" @oninput="@((e) => { UserNames[2]=(string)e.Value;})" />
*@

 @if (loading != LoadingStates.done)
{
    <h2>@loading</h2>
}
else{
    @if (FilterList.Count > 0)
    {
        @*<div class="filter-container">
        @foreach (KeyValuePair<Person, int> entry in FilterList)
        {
            var tmpPerson = entry.Key;
            <button class="btn btn-secondary" @onclick="() => filterMember(tmpPerson)">   @entry.Key.Name   @entry.Key.Role   @entry.Value</button> <br />
        }
        </div>*@
        @foreach (KeyValuePair<string, Dictionary<string,int>> roles in FilterList)
        {
            var sortedDict = from entry in roles.Value orderby entry.Value descending select entry; //https://stackoverflow.com/questions/289/how-do-you-sort-a-dictionary-by-value
            <div class="filter-container">
                 <h2> @roles.Key</h2>

               
                @foreach(KeyValuePair<string, int> names in sortedDict)
                {
                    var tmpPerson = new Person(Name: names.Key, Role: roles.Key);
                    <button class="btn btn-secondary" @onclick="() => filterMember(tmpPerson)">   @names.Key   @names.Value</button> <br />

                }
                </div>
        }
    }
    
<table class="table">
    <thread>
        <tr>
            <th>Movie @MatchedMovieCount</th>
        @foreach (string userName in UserNames)
            {
                <th>@userName</th>
            }
            <th> Avg Delta @averageDelta</th>
        </tr>
    </thread>
    <tbody>
    @foreach (SharedMovieObject tableMovie in UsersSharedMovieList)
    {
        <tr> 
            <td>@tableMovie.Movie.Name</td>
                @for (int i = 0; i < UserNames.Count; i++)
                {
                    <td>@UserScore(UserNames[i], tableMovie)</td>
                }
                <td>@tableMovie.AverageRaitingDifference</td>
        </tr>
    }
    </tbody>
    </table>
}

@code {
    private string uri = "https://locksley.dev:1313/user?u=";
    public List<string> UserNames = new List<string> { "Sigmasalt", "Sigmascoop"};
    public List<SharedMovieObject> UsersSharedMovieList = new List<SharedMovieObject> { };
    public List<SharedMovieObject> PreFilterUsersSharedMovieList = new List<SharedMovieObject> { };
    public Double averageDelta = 0.0;
    public LoadingStates loading = LoadingStates.done;
    public int MatchedMovieCount = 0;
    //public IDictionary<Person, int> FilterList = new Dictionary<Person, int>(); 
    public Dictionary<string, Dictionary<string, int>> FilterList = new Dictionary<string, Dictionary<string, int>>(); 
    private int UserScore(string userName, SharedMovieObject movie)
    {
        foreach(UserRaiting userRaitingList in movie.UserRaitings)
        {
            if (userRaitingList.UserName == userName) {
                return userRaitingList.Raiting;
            }
        }
        return -10000;
    }    
    private void resetFilter()
    {
        UsersSharedMovieList = new List<SharedMovieObject>(PreFilterUsersSharedMovieList);
        updateFilterList();
        countAverage();
        StateHasChanged();
    }

    private void filterMember(Person teamMember){
        loading = LoadingStates.parsing;
        for (int i = UsersSharedMovieList.Count -1; i >=0; i--)
        {
            if(!UsersSharedMovieList[i].Movie.Crew.Any(Person => Person.Name == teamMember.Name && Person.Role == teamMember.Role))
            {
                UsersSharedMovieList.RemoveAt(i);
            }
        }

        updateFilterList();
        Console.WriteLine(UsersSharedMovieList.Count);
        countAverage();
        loading = LoadingStates.done;
        StateHasChanged();

    }
    private void updateFilterList()
    {
        //FilterList = new Dictionary<Person, int>();

        //  loading = LoadingStates.parsing;
        //  foreach (SharedMovieObject sharedMovie in UsersSharedMovieList)
        //  {
        //      foreach (Person teamMember in sharedMovie.Movie.Crew)
        //      {
        //          if (FilterList.ContainsKey(teamMember)){
        //              FilterList[teamMember] += 1;
        //          }
        //          else
        //          {
        //              FilterList[teamMember] = 1;
        //          }
        //      }
        //  }
        FilterList =  new Dictionary<string, Dictionary<string, int>>(); 

        loading = LoadingStates.parsing;
        foreach (SharedMovieObject sharedMovie in UsersSharedMovieList)
        {
            foreach (Person teamMember in sharedMovie.Movie.Crew)
            {
                if (!FilterList.ContainsKey(teamMember.Role)){
                    FilterList[teamMember.Role] = new Dictionary<string, int>();
                }
                if (FilterList[teamMember.Role].ContainsKey(teamMember.Name)){

                    FilterList[teamMember.Role][teamMember.Name] += 1;
                }
                else
                {
                    FilterList[teamMember.Role][teamMember.Name]  = 1;
                }
            }
        }
    }


    private void countAverage()
    {
        MatchedMovieCount = UsersSharedMovieList.Count;
        var deltaSum = 0;
        foreach(SharedMovieObject sharedMovie in UsersSharedMovieList)
        {
            deltaSum += Math.Abs(sharedMovie.AverageRaitingDifference);
        }
        averageDelta = (double)deltaSum / (double)UsersSharedMovieList.Count;

    }

    private void UpdateMatchingList(List<UserMovieListModel> userLists)
    //this is a mess, I'm not really sure how to structure Blazor or C# so this is better.
    //todo: split list filter and calculations.
    {
        loading = LoadingStates.parsing;
        StateHasChanged();
        UsersSharedMovieList = new List<SharedMovieObject> { };

        foreach (Movie userMovie in userLists[0].Movies){
            List<UserRaiting> tmpMovieRaitings = new List<UserRaiting> { };
            tmpMovieRaitings.Add(new UserRaiting(userLists[0].Name, userMovie.Raiting));
            for (var i = 1; i < userLists.Count; i++)
            {
                var tmpMovie = userLists[i].Movies.FirstOrDefault(movie => movie.ID == userMovie.ID);
                if (tmpMovie == null) {
                    goto NEXTMOVIE;
                }
                tmpMovieRaitings.Add(new UserRaiting(userLists[i].Name, tmpMovie.Raiting));
                if (i == userLists.Count - 1) {
                    UsersSharedMovieList.Add(new SharedMovieObject(tmpMovieRaitings.ToArray(), userMovie, userMovie.ID));
                }
            }
NEXTMOVIE:
            continue;
        }
        Console.WriteLine(UsersSharedMovieList.Count + " Movies matched between users");
        UsersSharedMovieList = UsersSharedMovieList.OrderByDescending(o => o.AverageRaitingDifference).ToList();
        PreFilterUsersSharedMovieList = new List<SharedMovieObject>(UsersSharedMovieList);

        updateFilterList();
        countAverage();
        loading = LoadingStates.done;
        StateHasChanged();
    }


    private async void getUserList()
    {
        loading = LoadingStates.fetching;
        HttpClient client = new HttpClient();
        var userLists = new List<UserMovieListModel>();
        try
        {   
            foreach (string username in UserNames) {
                var user = await HttpClientJsonExtensions.GetFromJsonAsync<UserMovieListModel>(client, uri+username);
                if (user != null){
                    userLists.Add(user);
                    //Console.WriteLine("Added " + user);
                }
            }
            UpdateMatchingList(userLists);
        }
        catch(HttpRequestException e)
        {
            Console.WriteLine("\nException Caught!");	
            Console.WriteLine("Message :{0} ",e.Message);
        }
    }

}
